/PROG  _PLC_LID
/ATTR
OWNER		= MNEDITOR;
COMMENT		= "";
PROG_SIZE	= 4971;
CREATE		= DATE 21-04-13  TIME 18:16:32;
MODIFIED	= DATE 21-04-13  TIME 18:16:32;
FILE_NAME	= ;
VERSION		= 0;
LINE_COUNT	= 219;
MEMORY_SIZE	= 5423;
PROTECT		= READ_WRITE;
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= 0;
DEFAULT_GROUP	= 1,*,*,*,*;
CONTROL_CODE	= 00000000 00000000;
/APPL
/APPL

AUTO_SINGULARITY_HEADER;
  ENABLE_SINGULARITY_AVOIDANCE   : TRUE;
/MN
   1:  !************************* ;
   2:  !262630 - Place Lid ;
   3:  !JR Automation ;
   4:  !Created: March 2021 ;
   5:  ! Place Lid ;
   6:  !************************* ;
   7:   ;
   8:  !Program Resume Check ;
   9:  //IF R[1:State]>=500 AND R[1:State]<599,JMP LBL[R[1]] ;
  10:   ;
  11:  CALL PAYLOAD    ;
  12:   ;
  13:  !Write the current data to Regs ;
  14:  R[9:St. CMD]=GI[1:Command]    ;
  15:  R[10:St. Index]=GI[3:Index]    ;
  16:  R[11:St. Aux Index]=GI[4:Aux Index]    ;
  17:   ;
  18:  !Parameter Check ;
  19:  !Check if R[9] range is valid ;
  20:  //IF (R[9:St. CMD]<>1),JMP LBL[9000] ;
  21:  !Check if R[10] range is valid ;
  22:  //IF (R[10:St. Index]<1 OR R[10:St. Index]>5),JMP LBL[9000] ;
  23:  !Check if R[11] range is valid ;
  24:  //IF (R[11:St. Aux Index]<1 OR R[11:St. Aux Index]>5),JMP LBL[9000] ;
  25:   ;
  26:  !----------------------------- ;
  27:  !--Set UTOOL Register ;
  28:  !--------------------------- ;
  29:  !*********************** ;
  30:  !Set UtoolNum ;
  31:  R[33:UToolNum]=2    ;
  32:  UTOOL_NUM=R[33:UToolNum] ;
  33:   ;
  34:  LBL[500:Data Select] ;
  35:  R[1:State]=500    ;
  36:   ;
  37:  !Clear work data ;
  38:  PR[7:Work Place]=LPOS-LPOS    ;
  39:  !Index= 1(Pallet Conv) ;
  40:  !Index= 2(Reject Conv) ;
  41:  !Index= 3(ReEntry Conv) ;
  42:  !Index= 4(DeLidder) ;
  43:  !Index= 5(Tub Conv) ;
  44:  !Index= 6(Lidder) ;
  45:   ;
  46:  !Load Data ;
  47:  --eg:Place Lid only for Lid Conveyor ;
  48:  PR[7:Work Place]=PR[73:Lid Pl Conveyor]    ;
  49:  !Add current stack height offset ;
  50:  PR[7,3:Work Place]=PR[7,3:Work Place]+R[10:St. Index]    ;
  51:  R[30:Perch Reg]=52    ;
  52:  R[32:UFrameNum]=5    ;
  53:  JMP LBL[510] ;
  54:   ;
  55:   ;
  56:  !If here, you took a wrong turn ;
  57:  R[99:Fault Code]=90    ;
  58:  !Invalid Index Location, Fault ou ;
  59:  JMP LBL[9000] ;
  60:   ;
  61:  LBL[510:Perch Start] ;
  62:  !*********************** ;
  63:  !Set Userframe based on R[11] ;
  64:  R[32:UFrameNum]=R[10:St. Index]+1    ;
  65:  !Pallet Conv UF[2] ;
  66:  !Scanner UF[3] ;
  67:  !DeLidder Stn UF[4] ;
  68:  !Lid Conv UF[5] ;
  69:  !Reject Conv UF[6] ;
  70:  !ReEntry Conv UF[7] ;
  71:   ;
  72:  !Check if Index value is valid. ;
  73:  IF ((R[32:UFrameNum]<1) OR (R[32:UFrameNum]>6)),JMP LBL[9000] ;
  74:  !Load Selected Uframe before resu ;
  75:  UFRAME_NUM=R[32:UFrameNum] ;
  76:  !*********************** ;
  77:  !----------------------------- ;
  78:  --eg:You can skip the Perchpaths program if you only have 2 perches and
    :  either of them can safely go to the other ;
  79:  R[1:State]=510    ;
  80:  R[99:Fault Code]=1    ;
  81:  IF (R[30:Perch Reg]=0),JMP LBL[9000] ;
  82:  !PR[49]/DO[70]: Pallet Perch ;
  83:  !PR[50]/DO[71]: Scan Perch ;
  84:  !PR[51]/DO[72]: DeLidding Perch ;
  85:  !PR[52]/DO[73]: Lid Conv Perch ;
  86:  !PR[53]/DO[74]: Reject Perch ;
  87:  !PR[54]/DO[75]: ReEntry Perch ;
  88:   ;
  89:  !Check if at any perch position ;
  90:  IF (DO[69:ValidPerch]=ON OR DO[68:FinalDestination]=ON) THEN ;
  91:  UFRAME_NUM=0 ;
  92:  R[99:Fault Code]=2    ;
  93:  CALL _PERCH_PATHS    ;
  94:  JMP LBL[520] ;
  95:  ENDIF ;
  96:   ;
  97:  !Robot is not at a perch position ;
  98:  !Go Park Yourself ;
  99:  CALL _SAFE_PARK    ;
 100:  UFRAME_NUM=0 ;
 101:  R[99:Fault Code]=2    ;
 102:  CALL _PERCH_PATHS    ;
 103:  JMP LBL[520] ;
 104:   ;
 105:  LBL[520:Tool Check] ;
 106:  R[1:State]=520    ;
 107:  R[100:FinalDestination]=0    ;
 108:  !Place Ready Vacuum Check ;
 109:  R[99:Fault Code]=1    ;
 110:  IF DI[169:iVacGripVacOK]=OFF,JMP LBL[9000] ;
 111:  !Place Ready Left Gripper Check ;
 112:  R[99:Fault Code]=1    ;
 113:  IF (DI[161:iTubGripLRetd]=OFF OR DI[162:iTubGripLExtd]=ON),JMP LBL[9000] ;
 114:  !Place Ready Right Gripper Check ;
 115:  R[99:Fault Code]=2    ;
 116:  IF (DI[163:iTubGripRRetd]=OFF OR DI[164:iTubGripRExtd]=ON),JMP LBL[9000] ;
 117:  !Place Ready Vertical Lift Check ;
 118:  R[99:Fault Code]=3    ;
 119:  IF (DI[167:iTubGripLiftRetd]=OFF OR DI[168:iTubGripLiftExtd]=ON),JMP LBL[9000] ;
 120:   ;
 121:  LBL[525:Approach Only] ;
 122:  R[1:State]=525    ;
 123:  UFRAME_NUM=R[32:UFrameNum] ;
 124:  UTOOL_NUM=R[33:UToolNum] ;
 125:  !Set Collision Guard ;
 126:  COL GUARD ADJUST 100 ;
 127:  !Approach 1 ;
 128:L PR[7:Work Place] 4000mm/sec CNT75 Offset,PR[124]    ;
 129:  DO[41:Ok To Stop]=ON ;
 130:  R[99:Fault Code]=1    ;
 131:  WAIT DI[45:Approach Only]=OFF TIMEOUT,LBL[9000] ;
 132:  DO[41:Ok To Stop]=OFF ;
 133:   ;
 134:  LBL[530:Move to Place] ;
 135:  R[1:State]=530    ;
 136:  !Approach 2 ;
 137:L PR[7:Work Place] 2500mm/sec CNT25 Offset,PR[125]    ;
 138:  !Approach 3 ;
 139:L PR[7:Work Place] 1200mm/sec CNT25 Offset,PR[126]    ;
 140:   ;
 141:L PR[7:Work Place] 500mm/sec FINE    ;
 142:   ;
 143:  LBL[540:Vacuum OFF] ;
 144:  R[1:State]=540    ;
 145:  DO[165:oVacOn]=OFF ;
 146:  $WAITTMOUT=8000 ;
 147:  DO[166:oBlowoffOn]=ON ;
 148:  WAIT    .50(sec) ;
 149:  DO[166:oBlowoffOn]=OFF ;
 150:  WAIT DI[169:iVacGripVacOK]=OFF    ;
 151:  !Load New Payload ;
 152:  CALL PAYLOAD    ;
 153:   ;
 154:  IF (DI[38:Single Step]=OFF),JMP LBL[570] ;
 155:  !Single Step Code ;
 156:  DO[41:Ok To Stop]=ON ;
 157:  WAIT DI[39:Single Step ADV]=ON    ;
 158:  DO[43:Single Step Adv Ack]=ON ;
 159:  WAIT DI[39:Single Step ADV]=OFF    ;
 160:  DO[43:Single Step Adv Ack]=OFF ;
 161:  DO[41:Ok To Stop]=OFF ;
 162:   ;
 163:  LBL[570:Place Retreat 1] ;
 164:  R[1:State]=570    ;
 165:  !Set Collision Guard ;
 166:  COL GUARD ADJUST 100 ;
 167:   ;
 168:  !Place Retreat 1 ;
 169:L PR[7:Work Place] 1200mm/sec CNT10 Offset,PR[127:Lid Pl Retr1]    ;
 170:   ;
 171:  !Place Retreat 2 ;
 172:L PR[7:Work Place] 2000mm/sec CNT50 Offset,PR[128:Lid Pl Retr2]    ;
 173:   ;
 174:  LBL[180: Place Retreat 2] ;
 175:  R[1:State]=180    ;
 176:   ;
 177:  !Place Retreat 3 ;
 178:L PR[7:Work Place] 4000mm/sec CNT100 Offset,PR[129:Lid Pl Retr3]    ;
 179:   ;
 180:  LBL[590: Return to Perch] ;
 181:  R[1:State]=590    ;
 182:  UFRAME_NUM=0 ;
 183:J PR[R[30]] 100% CNT75    ;
 184:  R[100:FinalDestination]=R[30:Perch Reg]    ;
 185:   ;
 186:  !Skip handshake if out of Auto Cy ;
 187:  IF DI[33:Cycle Auto]=OFF,JMP LBL[599] ;
 188:  !Handshake with PLC ;
 189:  GO[1:Response]=R[9:St. CMD] ;
 190:  DO[41:Ok To Stop]=ON ;
 191:  R[99:Fault Code]=1    ;
 192:  WAIT GI[1:Command]=0 TIMEOUT,LBL[9000] ;
 193:  DO[41:Ok To Stop]=OFF ;
 194:  GO[1:Response]=0 ;
 195:  LBL[599: End] ;
 196:  R[1:State]=599    ;
 197:   ;
 198:  R[1:State]=0    ;
 199:  JMP LBL[9999] ;
 200:   ;
 201:  LBL[9000:ALARM] ;
 202:  !Generate Warning or Fault ;
 203:  IF (R[99:Fault Code]<1) THEN ;
 204:  GO[6:Faulted State]=R[1:State] ;
 205:  GO[2:Fault Number]=97 ;
 206:  ELSE ;
 207:  GO[6:Faulted State]=R[1:State] ;
 208:  GO[2:Fault Number]=R[99:Fault Code] ;
 209:  ENDIF ;
 210:  PAUSE ;
 211:  ABORT ;
 212:  !***************************** ;
 213:  LBL[9998:Abort] ;
 214:  WAIT   1.00(sec) ;
 215:  ABORT ;
 216:  !***************************** ;
 217:  LBL[9999:End] ;
 218:  !FINITO ;
 219:  !************************* ;
/POS
/END

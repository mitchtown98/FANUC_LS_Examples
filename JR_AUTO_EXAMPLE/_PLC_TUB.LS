/PROG  _PLC_TUB
/ATTR
OWNER		= MNEDITOR;
COMMENT		= "";
PROG_SIZE	= 6639;
CREATE		= DATE 21-04-13  TIME 18:16:32;
MODIFIED	= DATE 21-04-13  TIME 18:16:32;
FILE_NAME	= ;
VERSION		= 0;
LINE_COUNT	= 321;
MEMORY_SIZE	= 7327;
PROTECT		= READ_WRITE;
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= 0;
DEFAULT_GROUP	= 1,*,*,*,*;
CONTROL_CODE	= 00000000 00000000;
/APPL
/APPL

AUTO_SINGULARITY_HEADER;
  ENABLE_SINGULARITY_AVOIDANCE   : TRUE;
/MN
   1:  !************************* ;
   2:  !262630 - Place Tub ;
   3:  !JR Automation ;
   4:  !Created: March 2021 ;
   5:  ! Place Tub ;
   6:  !************************* ;
   7:   ;
   8:  !Program Resume Check ;
   9:  //IF R[1:State]>=300 AND R[1:State]<399,JMP LBL[R[1]] ;
  10:   ;
  11:  CALL PAYLOAD    ;
  12:   ;
  13:  !Write the current data to Regs ;
  14:  R[9:St. CMD]=GI[1:Command]    ;
  15:  R[10:St. Index]=GI[3:Index]    ;
  16:  R[11:St. Aux Index]=GI[4:Aux Index]    ;
  17:   ;
  18:  !Parameter Check ;
  19:  !Check if R[9] range is valid ;
  20:  //IF (R[9:St. CMD]<>1),JMP LBL[9000] ;
  21:  !Check if R[10] range is valid ;
  22:  //IF (R[10:St. Index]<1 OR R[10:St. Index]>5),JMP LBL[9000] ;
  23:  !Check if R[11] range is valid ;
  24:  //IF (R[11:St. Aux Index]<1 OR R[11:St. Aux Index]>5),JMP LBL[9000] ;
  25:   ;
  26:  !----------------------------- ;
  27:  !--Set UTOOL Register ;
  28:  !--------------------------- ;
  29:  !*********************** ;
  30:  !Set UtoolNum ;
  31:  R[33:UToolNum]=2    ;
  32:  UTOOL_NUM=R[33:UToolNum] ;
  33:   ;
  34:  LBL[300:Data Select] ;
  35:  R[1:State]=300    ;
  36:   ;
  37:  !Clear work data ;
  38:  PR[7:Work Place]=LPOS-LPOS    ;
  39:  !Index= 1(Pallet Conv) ;
  40:  !Index= 2(Reject Conv) ;
  41:  !Index= 3(ReEntry Conv) ;
  42:  !Index= 4(DeLidder) ;
  43:  !Index= 5(Tub Conv) ;
  44:  !Index= 6(Lidder) ;
  45:   ;
  46:  !Determine Work Place Location ;
  47:  !Set Place PR Range ;
  48:  R[19:PR Select Reg]=R[10:St. Index]+9    ;
  49:   ;
  50:  !Load Place Data ;
  51:  SELECT R[10:St. Index]=2,JMP LBL[302] ;
  52:         =4,JMP LBL[304] ;
  53:         ELSE,JMP LBL[9000] ;
  54:   ;
  55:  LBL[302:Reject Conv Data] ;
  56:  !Place At Reject Conv ;
  57:  PR[7:Work Place]=PR[74:Reject Drop]    ;
  58:  R[30:Perch Reg]=53    ;
  59:  R[32:UFrameNum]=6    ;
  60:  JMP LBL[310] ;
  61:   ;
  62:  LBL[304:Delidder Data] ;
  63:  !Place At DeLidder Station ;
  64:  PR[7:Work Place]=PR[71:Tub Pl DeLidder]    ;
  65:  R[30:Perch Reg]=51    ;
  66:  R[32:UFrameNum]=4    ;
  67:  JMP LBL[310] ;
  68:   ;
  69:   ;
  70:  !If here, you took a wrong turn ;
  71:  R[99:Fault Code]=90    ;
  72:  !Invalid Index Location, Fault ou ;
  73:  JMP LBL[9000] ;
  74:   ;
  75:  LBL[310:Perch Start] ;
  76:  !*********************** ;
  77:  --eg:Set Userframe based on R[11] in Load Data Section ;
  78:  !Pallet Conv UF[2] ;
  79:  !Barcode Scanner UF[3] ;
  80:  !DeLidder Stn UF[4] ;
  81:  !Lid Conv UF[5] ;
  82:  !Reject Conv UF[6] ;
  83:  !ReEntry Conv UF[7] ;
  84:   ;
  85:  !Check if Index value is valid. ;
  86:  IF ((R[32:UFrameNum]<1) OR (R[32:UFrameNum]>6)),JMP LBL[9000] ;
  87:  !Load Selected Uframe before resu ;
  88:  UFRAME_NUM=R[32:UFrameNum] ;
  89:  !*********************** ;
  90:  !----------------------------- ;
  91:  --eg:You can skip the Perchpaths program if you only have 2 perches and
    :  either of them can safely go to the other ;
  92:  R[1:State]=310    ;
  93:  R[99:Fault Code]=1    ;
  94:  IF (R[30:Perch Reg]=0),JMP LBL[9000] ;
  95:  !PR[49]/DO[70]: Pallet Perch ;
  96:  !PR[50]/DO[71]: Scan Perch ;
  97:  !PR[51]/DO[72]: DeLidding Perch ;
  98:  !PR[52]/DO[73]: Lid Conv Perch ;
  99:  !PR[53]/DO[74]: Reject Perch ;
 100:  !PR[54]/DO[75]: ReEntry Perch ;
 101:   ;
 102:  !Check if at any perch position ;
 103:  IF (DO[69:ValidPerch]=ON OR DO[68:FinalDestination]=ON) THEN ;
 104:  UFRAME_NUM=0 ;
 105:  R[99:Fault Code]=2    ;
 106:  CALL _PERCH_PATHS    ;
 107:  JMP LBL[320] ;
 108:  ENDIF ;
 109:   ;
 110:  !Robot is not at a perch position ;
 111:  !Go Park Yourself ;
 112:  CALL _SAFE_PARK    ;
 113:  UFRAME_NUM=0 ;
 114:  R[99:Fault Code]=2    ;
 115:  CALL _PERCH_PATHS    ;
 116:  JMP LBL[320] ;
 117:   ;
 118:  LBL[320:Tool Check] ;
 119:  R[1:State]=320    ;
 120:  R[100:FinalDestination]=0    ;
 121:  !Skip if Reject Place Sequence ;
 122:  IF R[10:St. Index]=2,JMP LBL[325] ;
 123:  !Left Gripper Check ;
 124:  IF (DI[161:iTubGripLRetd]=ON OR DI[162:iTubGripLExtd]=ON),JMP LBL[9000] ;
 125:  !Right Gripper Check ;
 126:  IF (DI[163:iTubGripRRetd]=ON OR DI[164:iTubGripRExtd]=ON),JMP LBL[9000] ;
 127:   ;
 128:  LBL[325:Approach Only] ;
 129:  R[1:State]=325    ;
 130:  UFRAME_NUM=R[32:UFrameNum] ;
 131:  UTOOL_NUM=R[33:UToolNum] ;
 132:  !Set Collision Guard ;
 133:  COL GUARD ADJUST 100 ;
 134:  !Approach 1 ;
 135:L PR[7:Work Place] 4000mm/sec CNT75 Offset,PR[139:Place Appr 1]    ;
 136:  DO[41:Ok To Stop]=ON ;
 137:  R[99:Fault Code]=1    ;
 138:  WAIT DI[45:Approach Only]=OFF TIMEOUT,LBL[9000] ;
 139:  DO[41:Ok To Stop]=OFF ;
 140:   ;
 141:  LBL[330:Move to Place] ;
 142:  R[1:State]=330    ;
 143:  !Approach 2 ;
 144:L PR[7:Work Place] 2500mm/sec CNT25 Offset,PR[140:Place Appr 2]    ;
 145:   ;
 146:  !Run if DeLidding Sequence ;
 147:  IF R[10:St. Index]<>4,JMP LBL[335] ;
 148:   ;
 149:  !UnGrip for DeLidder Place ;
 150:  DO[161:oGripExt]=ON ;
 151:  WAIT DI[162:iTubGripLExtd]=ON    ;
 152:  WAIT DI[164:iTubGripRExtd]=ON    ;
 153:   ;
 154:  IF (DI[38:Single Step]=OFF),JMP LBL[331] ;
 155:  !Single Step Code ;
 156:  DO[41:Ok To Stop]=ON ;
 157:  WAIT DI[39:Single Step ADV]=ON    ;
 158:  DO[43:Single Step Adv Ack]=ON ;
 159:  WAIT DI[39:Single Step ADV]=OFF    ;
 160:  DO[43:Single Step Adv Ack]=OFF ;
 161:  DO[41:Ok To Stop]=OFF ;
 162:   ;
 163:  LBL[331] ;
 164:  R[1:State]=331    ;
 165:  DO[164:oGripLiftRet]=ON ;
 166:  WAIT DI[167:iTubGripLiftRetd]=ON    ;
 167:   ;
 168:  IF (DI[38:Single Step]=OFF),JMP LBL[332] ;
 169:  !Single Step Code ;
 170:  DO[41:Ok To Stop]=ON ;
 171:  WAIT DI[39:Single Step ADV]=ON    ;
 172:  DO[43:Single Step Adv Ack]=ON ;
 173:  WAIT DI[39:Single Step ADV]=OFF    ;
 174:  DO[43:Single Step Adv Ack]=OFF ;
 175:  DO[41:Ok To Stop]=OFF ;
 176:   ;
 177:  LBL[332] ;
 178:  R[1:State]=332    ;
 179:  DO[162:oGripRet]=ON ;
 180:  WAIT DI[161:iTubGripLRetd]=ON    ;
 181:  WAIT DI[163:iTubGripRRetd]=ON    ;
 182:   ;
 183:  IF (DI[38:Single Step]=OFF),JMP LBL[335] ;
 184:  !Single Step Code ;
 185:  DO[41:Ok To Stop]=ON ;
 186:  WAIT DI[39:Single Step ADV]=ON    ;
 187:  DO[43:Single Step Adv Ack]=ON ;
 188:  WAIT DI[39:Single Step ADV]=OFF    ;
 189:  DO[43:Single Step Adv Ack]=OFF ;
 190:  DO[41:Ok To Stop]=OFF ;
 191:   ;
 192:  LBL[335:Move to Place] ;
 193:  R[1:State]=335    ;
 194:  !Approach 3 ;
 195:L PR[7:Work Place] 1200mm/sec CNT25 Offset,PR[141:Place Appr 3]    ;
 196:   ;
 197:L PR[7:Work Place] 500mm/sec FINE    ;
 198:   ;
 199:  !Run if Reject Place Sequence ;
 200:  IF R[10:St. Index]<>2,JMP LBL[340] ;
 201:  !UnGrip at Reject Conveyor ;
 202:  DO[161:oGripExt]=ON ;
 203:  WAIT DI[162:iTubGripLExtd]=ON    ;
 204:  WAIT DI[164:iTubGripRExtd]=ON    ;
 205:   ;
 206:  IF (DI[38:Single Step]=OFF),JMP LBL[336] ;
 207:  !Single Step Code ;
 208:  DO[41:Ok To Stop]=ON ;
 209:  WAIT DI[39:Single Step ADV]=ON    ;
 210:  DO[43:Single Step Adv Ack]=ON ;
 211:  WAIT DI[39:Single Step ADV]=OFF    ;
 212:  DO[43:Single Step Adv Ack]=OFF ;
 213:  DO[41:Ok To Stop]=OFF ;
 214:   ;
 215:  LBL[336] ;
 216:  R[1:State]=336    ;
 217:  !Retract Gripper Lift ;
 218:  DO[164:oGripLiftRet]=ON ;
 219:  WAIT DI[167:iTubGripLiftRetd]=ON    ;
 220:   ;
 221:  IF (DI[38:Single Step]=OFF),JMP LBL[337] ;
 222:  !Single Step Code ;
 223:  DO[41:Ok To Stop]=ON ;
 224:  WAIT DI[39:Single Step ADV]=ON    ;
 225:  DO[43:Single Step Adv Ack]=ON ;
 226:  WAIT DI[39:Single Step ADV]=OFF    ;
 227:  DO[43:Single Step Adv Ack]=OFF ;
 228:  DO[41:Ok To Stop]=OFF ;
 229:   ;
 230:  LBL[337] ;
 231:  R[1:State]=337    ;
 232:  !Retract Grippers in prep for nex ;
 233:  DO[162:oGripRet]=ON ;
 234:  WAIT DI[161:iTubGripLRetd]=ON    ;
 235:  WAIT DI[163:iTubGripRRetd]=ON    ;
 236:   ;
 237:  IF (DI[38:Single Step]=OFF),JMP LBL[340] ;
 238:  !Single Step Code ;
 239:  DO[41:Ok To Stop]=ON ;
 240:  WAIT DI[39:Single Step ADV]=ON    ;
 241:  DO[43:Single Step Adv Ack]=ON ;
 242:  WAIT DI[39:Single Step ADV]=OFF    ;
 243:  DO[43:Single Step Adv Ack]=OFF ;
 244:  DO[41:Ok To Stop]=OFF ;
 245:   ;
 246:  LBL[340:Vacuum Check] ;
 247:  R[1:State]=340    ;
 248:  DO[165:oVacOn]=OFF ;
 249:  $WAITTMOUT=8000 ;
 250:  DO[166:oBlowoffOn]=ON ;
 251:  WAIT    .50(sec) ;
 252:  DO[166:oBlowoffOn]=OFF ;
 253:  WAIT DI[169:iVacGripVacOK]=OFF    ;
 254:  !Load New Payload ;
 255:  CALL PAYLOAD    ;
 256:   ;
 257:  IF (DI[38:Single Step]=OFF),JMP LBL[370] ;
 258:  !Single Step Code ;
 259:  DO[41:Ok To Stop]=ON ;
 260:  WAIT DI[39:Single Step ADV]=ON    ;
 261:  DO[43:Single Step Adv Ack]=ON ;
 262:  WAIT DI[39:Single Step ADV]=OFF    ;
 263:  DO[43:Single Step Adv Ack]=OFF ;
 264:  DO[41:Ok To Stop]=OFF ;
 265:   ;
 266:  LBL[370:Place Retreat 1] ;
 267:  R[1:State]=370    ;
 268:  !Set Collision Guard ;
 269:  COL GUARD ADJUST 100 ;
 270:   ;
 271:  !Place Retreat 1 ;
 272:L PR[7:Work Place] 1200mm/sec CNT10 Offset,PR[142:Place Retr1]    ;
 273:   ;
 274:  !Place Retreat 2 ;
 275:L PR[7:Work Place] 2000mm/sec CNT50 Offset,PR[143:Place Retr2]    ;
 276:   ;
 277:  LBL[180: Place Retreat 2] ;
 278:  R[1:State]=180    ;
 279:   ;
 280:  !Place Retreat 3 ;
 281:L PR[7:Work Place] 4000mm/sec CNT100 Offset,PR[144:Place Retr3]    ;
 282:   ;
 283:  LBL[390: Return to Perch] ;
 284:  R[1:State]=390    ;
 285:  UFRAME_NUM=0 ;
 286:J PR[R[30]] 100% CNT75    ;
 287:  R[100:FinalDestination]=R[30:Perch Reg]    ;
 288:   ;
 289:  IF DI[33:Cycle Auto]=OFF,JMP LBL[399] ;
 290:  !Handshake with PLC ;
 291:  GO[1:Response]=R[9:St. CMD] ;
 292:  DO[41:Ok To Stop]=ON ;
 293:  R[99:Fault Code]=1    ;
 294:  WAIT GI[1:Command]=0 TIMEOUT,LBL[9000] ;
 295:  DO[41:Ok To Stop]=OFF ;
 296:  LBL[399: End] ;
 297:  R[1:State]=399    ;
 298:  GO[1:Response]=0 ;
 299:   ;
 300:  R[1:State]=0    ;
 301:  JMP LBL[9999] ;
 302:   ;
 303:  LBL[9000:ALARM] ;
 304:  !Generate Warning or Fault ;
 305:  IF (R[99:Fault Code]<1) THEN ;
 306:  GO[6:Faulted State]=R[1:State] ;
 307:  GO[2:Fault Number]=97 ;
 308:  ELSE ;
 309:  GO[6:Faulted State]=R[1:State] ;
 310:  GO[2:Fault Number]=R[99:Fault Code] ;
 311:  ENDIF ;
 312:  PAUSE ;
 313:  ABORT ;
 314:  !***************************** ;
 315:  LBL[9998:Abort] ;
 316:  WAIT   1.00(sec) ;
 317:  ABORT ;
 318:  !***************************** ;
 319:  LBL[9999:End] ;
 320:  !FINITO ;
 321:  !************************* ;
/POS
/END

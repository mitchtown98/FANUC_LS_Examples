/PROG  CBG_SYS_LOGIC
/ATTR
OWNER		= MNEDITOR;
COMMENT		= "BACKGROUND";
PROG_SIZE	= 5511;
CREATE		= DATE 24-03-08  TIME 09:49:44;
MODIFIED	= DATE 24-03-08  TIME 09:49:44;
FILE_NAME	= BG_SYS_L;
VERSION		= 0;
LINE_COUNT	= 217;
MEMORY_SIZE	= 5879;
PROTECT		= READ_WRITE;
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= 0;
DEFAULT_GROUP	= *,*,*,*,*;
CONTROL_CODE	= 00000000 00000000;
/APPL
/APPL

AUTO_SINGULARITY_HEADER;
  ENABLE_SINGULARITY_AVOIDANCE   : FALSE;
/MN
   1:  !FAULT RESET **JDM** ;
   2:  F[104:FAULT RESET]=(DI[43:ROBOT FAULT RESET] OR DI[701:op10_reset_req]) ;
   3:   ;
   4:  !HOME POSITION CHECK ;
   5:  IF (DO[145:AT HOME]=ON OR DO[146:TABLE PERCH]=ON OR DO[147:MACHINE PERCH]=ON OR DO[148:PERCH SPARE]=ON OR DO[149:PERCH SPARE]=ON OR DO[150:SINGULARITY]=ON OR DO[151:PERCH SPARE]=ON OR 
    :  DO[152:AT MAINTENANCE]=ON) THEN ;
   6:   ;
   7:  DO[160:ROBOT PERCHED]=ON ;
   8:  DO[217:ROBOT RETRACTED COM]=ON ;
   9:   ;
  10:  IF (DO[145:AT HOME]=ON),R[40:RECOVER START PR]=(1) ;
  11:  ELSE ;
  12:  DO[160:ROBOT PERCHED]=OFF ;
  13:  ENDIF ;
  14:   ;
  15:  !STEPMODE STATUS ;
  16:  DO[30:IN STEP MODE]=($SSR.$SINGLESTEP) ;
  17:   ;
  18:  !MONITOR IF ROBOT IS JOGGED ;
  19:  IF (DO[28:ROBOT JOGGED]=OFF AND $MOR_GRP[1].$JOGGED=1) THEN ;
  20:  DO[28:ROBOT JOGGED]=ON ;
  21:  ENDIF ;
  22:   ;
  23:  IF (DO[28:ROBOT JOGGED]=ON AND DO[145:AT HOME]=ON) THEN ;
  24:  DO[28:ROBOT JOGGED]=OFF ;
  25:  ENDIF ;
  26:   ;
  27:  IF (DO[31:CYCLE STOP ACTIVE]=ON),DO[32:PURGE ACTIVE]=(ON) ;
  28:   ;
  29:  !CYCLE STOP AND PURGE CONTROL ;
  30:  ! **JDM** ;
  31:  IF (DI[31:CYCLE STOP REQ]=ON OR DI[32:PURGE REQ]=ON OR DI[103:NEW PART HMI PB]=ON OR DI[700:op10_stop_req]=ON),F[1:I/O ONE SHOT 1]=PULSE   ;
  32:  ! **JDM** ;
  33:  IF (F[1:I/O ONE SHOT 1]=ON AND DI[31:CYCLE STOP REQ]=ON OR DI[700:op10_stop_req]=ON),DO[31:CYCLE STOP ACTIVE]=(!DO[31:CYCLE STOP ACTIVE]) ;
  34:   ;
  35:  IF (F[1:I/O ONE SHOT 1]=ON AND DI[32:PURGE REQ]=ON),DO[32:PURGE ACTIVE]=(!DO[32:PURGE ACTIVE]) ;
  36:   ;
  37:  !CONTROL LOAD COMPLETE SIGNALS ;
  38:  ! **JDM** ;
  39:  IF ((DI[47:LOAD COMPLETE HMI]=ON OR DI[703:op10_load_complete]=ON) AND DO[42:TABLE READY FOR SERVICE]=ON),DO[41:TABLE READY TO ROTATE]=(ON) ;
  40:  ! **JDM** ;
  41:  IF ((DI[47:LOAD COMPLETE HMI]=ON OR DI[703:op10_load_complete]=ON) AND DO[42:TABLE READY FOR SERVICE]=ON AND DI[1:TABLE AT A POSITION]=ON),DO[26:B SIDE LOAD COMPLETE]=(ON) ;
  42:  ! **JDM** ;
  43:  IF ((DI[47:LOAD COMPLETE HMI]=ON OR DI[703:op10_load_complete]=ON) AND DO[42:TABLE READY FOR SERVICE]=ON AND DI[2:TABLE AT B POSITION]=ON),DO[25:A SIDE LOAD COMPLETE]=(ON) ;
  44:  ! **JDM** ;
  45:  IF ((DI[45:ABORT LOAD SIDE]=ON OR DI[704:op10_abort_load_side]=ON) AND DO[25:A SIDE LOAD COMPLETE]=ON AND DI[2:TABLE AT B POSITION]=ON),DO[25:A SIDE LOAD COMPLETE]=(OFF) ;
  46:  ! **JDM** ;
  47:  IF ((DI[45:ABORT LOAD SIDE]=ON OR DI[704:op10_abort_load_side]=ON) AND DO[26:B SIDE LOAD COMPLETE]=ON AND DI[1:TABLE AT A POSITION]=ON),DO[26:B SIDE LOAD COMPLETE]=(OFF) ;
  48:  ! **JDM** ;
  49:  IF ((DI[45:ABORT LOAD SIDE]=ON OR DI[704:op10_abort_load_side]=ON) AND DO[41:TABLE READY TO ROTATE]=ON),DO[41:TABLE READY TO ROTATE]=(OFF) ;
  50:   ;
  51:  !WRITES ACTIVE FRAMES TO REGISTER ;
  52:  R[60:CURRENT UFRAME]=($MNUFRAMENUM[1]) ;
  53:  R[61:CURRENT UTOOL]=($MNUTOOLNUM[1]) ;
  54:   ;
  55:  !SPEED CONTROL FOR AUTO ;
  56:  IF (R[41:GLOBAL SPEED]<10 OR R[41:GLOBAL SPEED]>100),R[41:GLOBAL SPEED]=(100) ;
  57:   ;
  58:  IF (R[48:MACH SPEED]<10 OR R[48:MACH SPEED]>175),R[48:MACH SPEED]=(100) ;
  59:   ;
  60:  IF (R[41:GLOBAL SPEED]>=10 AND R[41:GLOBAL SPEED]<=100 AND UO[8:TP enabled]=OFF AND DI[3:SCANNER WARNING CLEAR]=ON AND DI[4:SCANNER BLOCKED]=OFF AND GO[1:ACTIVE PNS NUM]<>2 AND DI[470:NOT IN MACHINE]=ON) THEN ;
  61:  R[42:REDUCED SPEED]=R[41:GLOBAL SPEED]/2.875    ;
  62:  ENDIF ;
  63:   ;
  64:  IF (UO[8:TP enabled]=OFF AND DO[202:RECOVER ACTIVE]=ON AND DI[3:SCANNER WARNING CLEAR]=ON) THEN ;
  65:  R[42:REDUCED SPEED]=15    ;
  66:  ENDIF ;
  67:   ;
  68:  IF (UO[8:TP enabled]=OFF AND DI[3:SCANNER WARNING CLEAR]=OFF) THEN ;
  69:  R[42:REDUCED SPEED]=10    ;
  70:  ENDIF ;
  71:   ;
  72:  IF (UO[8:TP enabled]=OFF AND DO[150:SINGULARITY]=ON) THEN ;
  73:  R[42:REDUCED SPEED]=20    ;
  74:  ENDIF ;
  75:   ;
  76:  !LOAD/UNLOAD MACHINE SPEED ;
  77:  IF (UO[8:TP enabled]=OFF AND R[48:MACH SPEED]>=10 AND R[48:MACH SPEED]<=175 AND DO[104:NEW PART ACTIVE]=OFF AND DI[470:NOT IN MACHINE]=OFF AND DI[3:SCANNER WARNING CLEAR]=ON AND DI[4:SCANNER BLOCKED]=OFF AND 
    :  GO[1:ACTIVE PNS NUM]=1),R[42:REDUCED SPEED]=(R[48:MACH SPEED]/2.5) ;
  78:   ;
  79:  IF (UO[8:TP enabled]=OFF),$MCR.$GENOVERRIDE=(R[42:REDUCED SPEED]) ;
  80:  R[45:CURRENT OVERRIDE]=($MCR.$GENOVERRIDE) ;
  81:   ;
  82:  --eg:CALCULATE REGISTERS USED TO ADJUST MOTION SPEED. THESE CALCULATIONS
    :  ARE FOR LASER MOTION TO ENSURE SPEED IS CONSTANT REGARDLESS OF OVERRIDE
    :  DURING MEASUREMENTS ;
  83:  R[87:MAX SPD RATIO]=R[45:CURRENT OVERRIDE]/100    ;
  84:  R[90:CALC SLOW]=R[88:NOM SLOW mm/sec]/R[87:MAX SPD RATIO]    ;
  85:  R[91:CALC FAST]=R[89:NOM FAST mm/sec]/R[87:MAX SPD RATIO]    ;
  86:  R[85:SEARCH SLOW SPD]=R[90:CALC SLOW]    ;
  87:  R[86:SEARCH FAST SPD]=R[91:CALC FAST]    ;
  88:   ;
  89:  !CONTROL STATUS LIGHTS ;
  90:  IF ((DI[1:TABLE AT A POSITION]=ON AND DO[37:TABLE A READY]=OFF AND DO[41:TABLE READY TO ROTATE]=OFF AND DO[39:TABLE SIDE A COMPLETE]=ON AND DO[104:NEW PART ACTIVE]=OFF) OR (DI[2:TABLE AT B POSITION]=ON AND 
    :  DO[38:TABLE B READY]=OFF AND DO[41:TABLE READY TO ROTATE]=OFF AND DO[40:TABLE SIDE B COMPLETE]=OFF AND DO[104:NEW PART ACTIVE]=OFF)) THEN ;
  91:  DO[3:MATERIAL LAMP]=(DO[27:Heartbeat]) ;
  92:  ELSE ;
  93:  IF (DO[104:NEW PART ACTIVE]=ON) THEN ;
  94:  DO[3:MATERIAL LAMP]=ON ;
  95:  ELSE ;
  96:  DO[3:MATERIAL LAMP]=OFF ;
  97:  ENDIF ;
  98:  ENDIF ;
  99:   ;
 100:  IF (UO[6:Fault]=ON AND DO[200:Input Simulated]=OFF AND DO[201:Output Simulated]=OFF AND DO[104:NEW PART ACTIVE]=OFF) THEN ;
 101:  DO[2:FAULT LAMP]=ON ;
 102:  ENDIF ;
 103:   ;
 104:  IF (UO[6:Fault]=ON) AND (DO[200:Input Simulated]=ON OR DO[201:Output Simulated]=ON OR DO[104:NEW PART ACTIVE]=ON) THEN ;
 105:  DO[2:FAULT LAMP]=(DO[27:Heartbeat]) ;
 106:  ENDIF ;
 107:   ;
 108:  IF (UO[6:Fault]=OFF AND DO[200:Input Simulated]=OFF AND DO[201:Output Simulated]=OFF) THEN ;
 109:  DO[2:FAULT LAMP]=OFF ;
 110:  ENDIF ;
 111:   ;
 112:  DO[111:ROBOT FAULTED]=(UO[6:Fault]) ;
 113:  DO[110:ROBOT RUNNING]=(UO[10:Busy]) ;
 114:   ;
 115:  IF (UO[10:Busy]=ON AND DO[3:MATERIAL LAMP]=OFF) THEN ;
 116:  DO[4:ROBOT RUNNING]=ON ;
 117:  ELSE ;
 118:  DO[4:ROBOT RUNNING]=OFF ;
 119:  ENDIF ;
 120:   ;
 121:  --eg:CALCULATE CURRENT SLOT NUMBER BASED ON CURRENT ROW AND COLUMN VALUES ;
 122:  R[6:CUR PICK SLOT #]=(((R[2:CUR ROW PICK (X)]-1)*(R[11:NUMBER OF COLS]))+(R[3:CUR COL PICK (Y)])) ;
 123:  R[7:CUR DROP SLOT #]=(((R[4:CUR ROW DROP (X)]-1)*(R[11:NUMBER OF COLS]))+(R[5:CUR COL DROP (Y)])) ;
 124:   ;
 125:  --eg:SET REGISTERS TO USE AS INDERCT VALUES FOR THE CURRENT ROW THE ROBOT
    :  IS WORKING ON TO DETERMINE START/STOP SLOT ON TABLE ;
 126:  R[36:PICK START REG]=R[2:CUR ROW PICK (X)]+R[2:CUR ROW PICK (X)]+12    ;
 127:  R[37:PICK STOP REG]=R[36:PICK START REG]+1    ;
 128:  R[38:DROP START REG]=R[4:CUR ROW DROP (X)]+R[4:CUR ROW DROP (X)]+12    ;
 129:  R[39:DROP STOP REG]=R[38:DROP START REG]+1    ;
 130:   ;
 131:  !SET TABLE READY FOR SERVICE SIG ;
 132:  ! **JDM** ;
 133:  IF (DI[6:TABLE LOCKED IN POSITION]=ON) AND ((DI[1:TABLE AT A POSITION]=ON AND DI[2:TABLE AT B POSITION]=OFF) OR (DI[1:TABLE AT A POSITION]=OFF AND DI[2:TABLE AT B POSITION]=ON)) THEN ;
 134:  DO[42:TABLE READY FOR SERVICE]=ON ;
 135:  DO[703:op10_tbl_rdy_service]=ON ;
 136:  ELSE ;
 137:  DO[42:TABLE READY FOR SERVICE]=OFF ;
 138:  DO[703:op10_tbl_rdy_service]=OFF ;
 139:  ENDIF ;
 140:   ;
 141:  !  Side A Complete Logic ;
 142:  !  **JDM** ;
 143:  IF (DI[1:TABLE AT A POSITION]=ON AND DO[43:TABLE PICK COMPLETE]=ON AND DO[44:TABLE DROP COMPLETE]=ON) THEN ;
 144:  DO[39:TABLE SIDE A COMPLETE]=ON ;
 145:  DO[704:op10_tblA_complete]=ON ;
 146:  ELSE ;
 147:  DO[39:TABLE SIDE A COMPLETE]=OFF ;
 148:  DO[704:op10_tblA_complete]=OFF ;
 149:  ENDIF ;
 150:   ;
 151:  !  Side B Complete Logic ;
 152:  !  **JDM** ;
 153:  IF (DI[2:TABLE AT B POSITION]=ON AND DO[43:TABLE PICK COMPLETE]=ON AND DO[44:TABLE DROP COMPLETE]=ON) THEN ;
 154:  DO[40:TABLE SIDE B COMPLETE]=ON ;
 155:  DO[705:op10_tblB_compelte]=ON ;
 156:  ELSE ;
 157:  DO[40:TABLE SIDE B COMPLETE]=OFF ;
 158:  DO[705:op10_tblB_compelte]=OFF ;
 159:  ENDIF ;
 160:   ;
 161:  !  Side A NOT Ready ;
 162:  IF (DI[1:TABLE AT A POSITION]=ON AND DO[39:TABLE SIDE A COMPLETE]=ON) THEN ;
 163:  DO[37:TABLE A READY]=OFF ;
 164:  ENDIF ;
 165:   ;
 166:  !  Side B NOT Ready ;
 167:  IF (DI[2:TABLE AT B POSITION]=ON AND DO[40:TABLE SIDE B COMPLETE]=ON) THEN ;
 168:  DO[38:TABLE B READY]=OFF ;
 169:  ENDIF ;
 170:   ;
 171:  !SET TABLE IN POSITION SIGNAL ;
 172:  IF ((DI[1:TABLE AT A POSITION]=ON AND DI[2:TABLE AT B POSITION]=OFF) OR (DI[1:TABLE AT A POSITION]=OFF AND DI[2:TABLE AT B POSITION]=ON)) THEN ;
 173:  DO[35:TABLE IN POSITION]=ON ;
 174:  ELSE ;
 175:  DO[35:TABLE IN POSITION]=OFF ;
 176:  ENDIF ;
 177:   ;
 178:  !UNLOCK TABLE IF NOT IN POSITION ;
 179:  IF (DO[35:TABLE IN POSITION]=OFF) THEN ;
 180:  DO[5:TURN TABLE UNLOCK SOL]=ON ;
 181:  ENDIF ;
 182:   ;
 183:  !MANUAL TABLE LOCK CONTROLS ;
 184:  IF (DI[38:TABLE UNLOCK (HMI)]=ON AND UO[10:Busy]=OFF AND DO[5:TURN TABLE UNLOCK SOL]=OFF AND DO[145:AT HOME]=ON),DO[5:TURN TABLE UNLOCK SOL]=(ON) ;
 185:  IF (DI[39:TABLE LOCK (HMI)]=ON AND UO[10:Busy]=OFF AND DO[5:TURN TABLE UNLOCK SOL]=ON AND DO[145:AT HOME]=ON AND DO[35:TABLE IN POSITION]=ON),DO[5:TURN TABLE UNLOCK SOL]=(OFF) ;
 186:   ;
 187:  !SET UI SIGNAL FROM DIN ;
 188:  ! **JDM** ;
 189:  IF (DI[42:ROBOT HOLD]=OFF OR DI[705:op10_hold]=OFF OR DI[7:MACH CNTRL SAFE]=OFF) THEN ;
 190:  F[101:*HOLD]=(OFF) ;
 191:  ELSE ;
 192:  F[101:*HOLD]=(ON) ;
 193:  ENDIF ;
 194:  F[100:*IMSTP]=(DI[8:SYSTEM AIR OK]) ;
 195:  F[102:*SFSPD]=(DI[8:SYSTEM AIR OK]) ;
 196:  F[107:ENABLE]=(DI[8:SYSTEM AIR OK]) ;
 197:   ;
 198:  !AIR FILTER TIMER ;
 199:  IF (R[302:HOURS]>0 AND DO[27:Heartbeat]=ON),F[90:COUNT AIR FILTER]=PULSE   ;
 200:   ;
 201:  IF (F[90:COUNT AIR FILTER]),R[303:SECONDS]=(R[303:SECONDS]-1) ;
 202:   ;
 203:  IF (R[303:SECONDS]=0) THEN ;
 204:  R[302:HOURS]=R[302:HOURS]-1    ;
 205:  R[303:SECONDS]=3600    ;
 206:  ENDIF ;
 207:   ;
 208:  --eg:COLLISION AT DROP ;
 209:  IF (R[40:RECOVER START PR]>=65 AND R[40:RECOVER START PR]<=69 AND DO[177:COLLISION]),DO[114:COLLISION AT DROP]=(ON) ;
 210:   ;
 211:  --eg:SAVE CURRENT JOINT VALUES TO REGISTERS ;
 212:  R[137:J1 POS]=$SCR_GRP[1].$MCH_ANG[1] ;
 213:  R[138:J2 POS]=$SCR_GRP[1].$MCH_ANG[2] ;
 214:  R[139:J3 POS]=$SCR_GRP[1].$MCH_ANG[3] ;
 215:  R[140:J4 POS]=$SCR_GRP[1].$MCH_ANG[4] ;
 216:  R[141:J5 POS]=$SCR_GRP[1].$MCH_ANG[5] ;
 217:  R[142:J6 POS]=$SCR_GRP[1].$MCH_ANG[6] ;
/POS
/END
